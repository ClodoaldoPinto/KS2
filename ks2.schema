--
-- PostgreSQL database dump
--

-- Dumped from database version 9.4.0
-- Dumped by pg_dump version 9.4.0
-- Started on 2015-02-02 13:49:56 UTC

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

DROP DATABASE IF EXISTS folding;
--
-- TOC entry 3195 (class 1262 OID 35366)
-- Name: folding; Type: DATABASE; Schema: -; Owner: folding
--

CREATE DATABASE folding WITH TEMPLATE = template0 ENCODING = 'SQL_ASCII' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


ALTER DATABASE folding OWNER TO folding;

\connect folding

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 3196 (class 1262 OID 35366)
-- Dependencies: 3195
-- Name: folding; Type: COMMENT; Schema: -; Owner: folding
--

COMMENT ON DATABASE folding IS 'Kakao Stats v2';


--
-- TOC entry 6 (class 2615 OID 2200)
-- Name: public; Type: SCHEMA; Schema: -; Owner: folding
--

CREATE SCHEMA public;


ALTER SCHEMA public OWNER TO folding;

--
-- TOC entry 3197 (class 0 OID 0)
-- Dependencies: 6
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: folding
--

COMMENT ON SCHEMA public IS 'standard public schema';


--
-- TOC entry 210 (class 3079 OID 12776)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 3199 (class 0 OID 0)
-- Dependencies: 210
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 762 (class 2612 OID 35370)
-- Name: plpythonu; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE OR REPLACE PROCEDURAL LANGUAGE plpythonu;


ALTER PROCEDURAL LANGUAGE plpythonu OWNER TO postgres;

--
-- TOC entry 209 (class 3079 OID 35371)
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- TOC entry 3200 (class 0 OID 0)
-- Dependencies: 209
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- TOC entry 211 (class 3079 OID 35380)
-- Name: dblink; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS dblink WITH SCHEMA public;


--
-- TOC entry 3201 (class 0 OID 0)
-- Dependencies: 211
-- Name: EXTENSION dblink; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dblink IS 'connect to other PostgreSQL databases from within a database';


SET search_path = public, pg_catalog;

--
-- TOC entry 657 (class 1247 OID 35428)
-- Name: type_donor_quarterly_rank; Type: TYPE; Schema: public; Owner: folding
--

CREATE TYPE type_donor_quarterly_rank AS (
	donor integer,
	name text,
	p1 real,
	p2 real,
	p3 real,
	tr1 integer,
	tr2 integer,
	tr3 integer,
	pr1 integer,
	pr2 integer,
	pr3 integer,
	qt real
);


ALTER TYPE type_donor_quarterly_rank OWNER TO folding;

--
-- TOC entry 660 (class 1247 OID 35431)
-- Name: type_monthly_rank; Type: TYPE; Schema: public; Owner: folding
--

CREATE TYPE type_monthly_rank AS (
	donor integer,
	points real,
	batch integer
);


ALTER TYPE type_monthly_rank OWNER TO folding;

--
-- TOC entry 663 (class 1247 OID 35434)
-- Name: type_select_team_size_table; Type: TYPE; Schema: public; Owner: folding
--

CREATE TYPE type_select_team_size_table AS (
	new_members smallint,
	active_members integer,
	day date,
	dow smallint
);


ALTER TYPE type_select_team_size_table OWNER TO folding;

--
-- TOC entry 666 (class 1247 OID 35437)
-- Name: type_team_production; Type: TYPE; Schema: public; Owner: folding
--

CREATE TYPE type_team_production AS (
	points real,
	wus integer,
	date timestamp without time zone
);


ALTER TYPE type_team_production OWNER TO folding;

--
-- TOC entry 669 (class 1247 OID 35440)
-- Name: type_two_serial_dates_x_days; Type: TYPE; Schema: public; Owner: folding
--

CREATE TYPE type_two_serial_dates_x_days AS (
	d1_serial integer,
	d0_serial integer
);


ALTER TYPE type_two_serial_dates_x_days OWNER TO folding;

--
-- TOC entry 265 (class 1255 OID 35441)
-- Name: batch_number(interval); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION batch_number(interval) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
select data_serial
from datas
where
	have_data
	and
	data <= (select max(data) from datas) - $1
order by data desc
limit 1$_$;


ALTER FUNCTION public.batch_number(interval) OWNER TO folding;

--
-- TOC entry 266 (class 1255 OID 35442)
-- Name: create_ndx_donors_production_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION create_ndx_donors_production_temp() RETURNS void
    LANGUAGE sql STRICT
    AS $$CREATE INDEX ndx_donor_production_temp
  ON donors_production_temp
  USING btree
  (usuario);
CREATE INDEX ndx_n_time_donor_production_temp
  ON donors_production_temp
  USING btree
  (n_time);
$$;


ALTER FUNCTION public.create_ndx_donors_production_temp() OWNER TO folding;

--
-- TOC entry 267 (class 1255 OID 35443)
-- Name: create_tab_new_members_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION create_tab_new_members_temp() RETURNS void
    LANGUAGE sql STRICT
    AS $$CREATE TABLE new_members_temp
(
  donor int4 NOT NULL,
  data timestamptz
)
WITHOUT OIDS;
ALTER TABLE new_members_temp OWNER TO folding;
GRANT ALL ON TABLE new_members_temp TO folding;
GRANT SELECT ON TABLE new_members_temp TO folding_web;

$$;


ALTER FUNCTION public.create_tab_new_members_temp() OWNER TO folding;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 178 (class 1259 OID 35444)
-- Name: datas; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE datas (
    data_serial integer NOT NULL,
    data timestamp with time zone NOT NULL,
    have_data boolean DEFAULT true NOT NULL
);


ALTER TABLE datas OWNER TO folding;

--
-- TOC entry 268 (class 1255 OID 35448)
-- Name: datas_last_batch_of_each_day(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION datas_last_batch_of_each_day() RETURNS SETOF datas
    LANGUAGE sql STABLE
    AS $$
select data_serial, data, have_data
from datas d
where
have_data
and
data = (
select max(data)
from datas
where
date_trunc('day', data) =
date_trunc('day', d.data)
)
;
$$;


ALTER FUNCTION public.datas_last_batch_of_each_day() OWNER TO folding;

--
-- TOC entry 269 (class 1255 OID 35449)
-- Name: db_feed(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION db_feed() RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
batch integer;
begin

insert into datas (data)
select last_date
from last_date_temp
;

select max(data_serial) into batch from datas;

insert into times_indice (n_time)
    select n_time from times_temp
    where pontos > 0
    except
    select n_time from times_indice
;

update times_indice
    set time_nome = times_temp.time_nome
    from times_temp
    where
        times_indice.n_time = times_temp.n_time
        and
        times_indice.time_nome != times_temp.time_nome
;

insert into times (data, n_time, pontos, wus)
select
    batch as data_serial,
    times_indice.n_time,
    pontos,
    wus
from times_temp inner join times_indice
    on times_temp.n_time = times_indice.n_time
where times_temp.pontos > 0
order by data_serial, times_indice.n_time
;

insert into usuarios_indice (usuario_nome, n_time)
select usuario, n_time from usuarios_temp
where pontos > 0
except
select usuario_nome, n_time from usuarios_indice
;

execute format('
create table usuarios_%1$s
    (like usuarios including constraints including defaults)
', batch);

execute format('
alter table usuarios_%1$s add constraint b%1$s check (data = %1$s)
', batch);

execute format('
insert into usuarios_%1$s (data, usuario, pontos, wus)
select
    %1$s as data,
    ui.usuario_serial as usuario,
    sum(pontos) as pontos,
    sum(wus) as wus
from usuarios_temp as ut inner join usuarios_indice as ui
    on ut.usuario = ui.usuario_nome and ut.n_time = ui.n_time
where ut.pontos > 0
group by data, ui.usuario_serial
order by data, ui.usuario_serial
', batch);

execute format('
alter table usuarios_%1$s
    add constraint fk_usuarios_%1$s foreign key (data) references datas (data_serial)
', batch);

execute format('
create unique index ndx_usuarios_%1$s on usuarios_%1$s (usuario)
', batch);

execute format('
alter table usuarios_%1$s inherit usuarios
', batch);

execute format('
analyze usuarios_%1$s
', batch);

end;
$_$;


ALTER FUNCTION public.db_feed() OWNER TO folding;

--
-- TOC entry 270 (class 1255 OID 35450)
-- Name: deletar_insert_donors_production_matriz(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION deletar_insert_donors_production_matriz() RETURNS void
    LANGUAGE sql STRICT
    AS $$insert into donors_production_matriz (
    usuario,
    n_time,
    pontos_0,
    pontos_24,
    pontos_7,
    pontos_up,
    active
   )
select d0.usuario, usuarios_indice.n_time,
    d0.pontos as pontos_0,
    d0.pontos - coalesce (d1.pontos, 0),
    d0.pontos - coalesce (d7.pontos, 0),
    d0.pontos - coalesce (dup.pontos, 0),
    d0.pontos > coalesce (d50.pontos, 0)
from usuarios as d0
  left outer join usuarios as dup
    on d0.usuario = dup.usuario
    and
    dup.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '3 hours'
            order by data desc
            limit 1
            )
  left outer join usuarios as d1
    on d0.usuario = d1.usuario
    and
    d1.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '1 day'
            order by data desc
            limit 1
            )
  left outer join usuarios as d7
    on d0.usuario = d7.usuario
    and
    d7.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '7 day'
            order by data desc
            limit 1
            )
  left outer join usuarios as d50
    on d0.usuario = d50.usuario
    and
    d50.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '50 day'
            order by data desc
            limit 1
            )
  inner join usuarios_indice on d0.usuario = usuario_serial
where d0.data = (select data_serial from datas order by data desc limit 1)
;
$$;


ALTER FUNCTION public.deletar_insert_donors_production_matriz() OWNER TO folding;

--
-- TOC entry 271 (class 1255 OID 35451)
-- Name: deletar_update_donors_rank_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION deletar_update_donors_rank_temp() RETURNS boolean
    LANGUAGE plpythonu STRICT
    AS $_$import psycopg2
import array
from itertools import imap
def fetchsome(cursor, arraysize=50000):
  while True:
    results = cursor.fetchmany(arraysize)
    if not results: break
    for result in results:
      yield result
def stringBool(bool):
  if bool:
    return 'True'
  return 'False'
up = dict()
db = psycopg2.connect("host=localhost dbname=folding")
cursor = db.cursor()
cursor.execute("select distinct n_time from usuarios_indice")
d = dict.fromkeys(imap(lambda line: line[0], fetchsome(cursor)), 0)
rank_time = d.copy()
# rank_0
query = """
select usuario, n_time
from donors_production_matriz
order by pontos_0 desc, pontos_7 desc, pontos_24 desc;
"""
cursor.execute(query)
rank = 0
for linha in fetchsome(cursor):
  rank += 1
  n_time = linha [1]
  rank_time [n_time] += 1
  up [linha [0]] = \
    array.array ('l',[rank, rank_time [n_time], 0, 0, 0, 0, 0 ,0])
# rank_24
query = """
select usuario, n_time
from donors_production_matriz
order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc;
"""
cursor.execute(query)
rank = 0
rank_time = d.copy()
for linha in fetchsome(cursor):
  rank += 1
  n_time = linha [1]
  rank_time [n_time] += 1
  up [linha [0]] [2] = rank
  up [linha [0]] [3] = rank_time [n_time]
# rank_7
query = """
select usuario, n_time
from donors_production_matriz
order by pontos_0 + pontos_7 desc, pontos_0 desc;
"""
cursor.execute(query)
rank = 0
rank_time = d.copy()
for linha in fetchsome(cursor):
  rank += 1
  n_time = linha [1]
  rank_time [n_time] += 1
  up [linha [0]] [4] = rank
  up [linha [0]] [5] = rank_time [n_time]
# rank_30
query = """
select usuario, n_time
from donors_production_matriz
order by pontos_0 + (pontos_7 * 30 / 7) desc, pontos_0 desc;
"""
cursor.execute(query)
rank = 0
rank_time = d.copy()
del(d)
for linha in fetchsome(cursor):
  rank += 1
  n_time = linha [1]
  rank_time [n_time] += 1
  up [linha [0]] [6] = rank
  up [linha [0]] [7] = rank_time [n_time]
del(rank_time)
#
query = """
prepare ins(
      int, int, float4, float4, float4, float4, boolean, int, int, int, int, int, int, int, int
      ) as
    insert into donors_production_temp (
      usuario,
      n_time,
      pontos_0,
      pontos_24,
      pontos_7,
      pontos_up,
      active,
      rank_0,
      rank_0_time,
      rank_24,
      rank_24_time,
      rank_7,
      rank_7_time,
      rank_30,
      rank_30_time
    )
    values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15);
"""
cursor.execute(query)
cursor.execute("select * from donors_production_matriz")
ins = db.cursor()
for linha in fetchsome(cursor):
  ins.execute ("execute ins (\
    %(usuario)s,\
    %(n_time)s,\
    %(pontos_0)s,\
    %(pontos_24)s,\
    %(pontos_7)s,\
    %(pontos_up)s,\
    %(active)s,\
    %(rank_0)s,\
    %(rank_0_time)s,\
    %(rank_24)s,\
    %(rank_24_time)s,\
    %(rank_7)s,\
    %(rank_7_time)s,\
    %(rank_30)s,\
    %(rank_30_time)s\
    );",{\
    'usuario': linha [0],\
    'n_time': linha [5],\
    'pontos_0': linha [3],\
    'pontos_24': linha [2],\
    'pontos_7': linha [1],\
    'pontos_up': linha [4],\
    'active': stringBool(linha [6]),\
    'rank_0': up [linha [0]][0],\
    'rank_0_time': up [linha [0]][1],\
    'rank_24': up [linha [0]][2],\
    'rank_24_time': up [linha [0]][3],\
    'rank_7': up [linha [0]][4],\
    'rank_7_time': up [linha [0]][5],\
    'rank_30': up [linha [0]][6],\
    'rank_30_time': up [linha [0]][7]\
    })
cursor.close()
ins.close()
db.commit()
db.close()
$_$;


ALTER FUNCTION public.deletar_update_donors_rank_temp() OWNER TO folding;

--
-- TOC entry 272 (class 1255 OID 35452)
-- Name: delete_old(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION delete_old() RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$declare
d0 timestamp with time zone;
d15 timestamp with time zone;
d8w timestamp with time zone;
d1a timestamp with time zone;
batch_id integer;
rday record;
begin

if extract(hour from current_timestamp)::integer between 1 and 23 then
    return;
end if;

d0 := (select max(data) from datas where have_data);
d15 := d0 - interval '15 days';
d8w := d0 - interval '8 weeks 1 day';
d1a := d0 - interval '1 year';

create temporary table batch as
    with dias as (
        select distinct on (dia)
            d.data::date as dia,
            d.data,
            data_serial
        from datas d
        where have_data
        order by dia, d.data desc
    ), meses as (
        select distinct on (mes)
            date_trunc('month', dias.data) as mes,
            dias.data,
            data_serial
        from dias
        order by mes, dias.data desc
    )
    select data_serial as batch, d.data
    from datas d
    where
        data_serial not in (
            select data_serial
            from meses
            where meses.data between d1a and d8w
            union
            select data_serial
            from dias
            where dias.data between d8w and d15
        )
        and
        d.data < d15
        and have_data
;
-- teams ------------------------------------------

delete from times
where data in (
    select batch
    from batch
    )
;

-- donors ------------------------------------------
for batch_id in
select batch from batch
loop
    execute format('drop table usuarios_%s', batch_id);
    update datas set have_data = false where data_serial = batch_id;
end loop;

for batch_id in
    select data_serial
    from datas
    where data < d8w and have_data
loop
    execute format('alter table usuarios_%s no inherit usuarios, inherit donor_work_old', batch_id);
    update datas set have_data = false where data_serial = batch_id;
end loop;

drop table batch;
return;
end;$$;


ALTER FUNCTION public.delete_old() OWNER TO folding;

--
-- TOC entry 273 (class 1255 OID 35453)
-- Name: delete_team_active_members_history(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION delete_team_active_members_history() RETURNS void
    LANGUAGE sql STRICT
    AS $$
delete from team_active_members_history
where serial_date in (
    select de.data_serial
    from (
        select distinct d.data_serial, d.data
        from datas d
        inner join team_active_members_history tam on
            d.data_serial = tam.serial_date
    ) de
    where
        de.data < (
            select max(data)
            from datas
            where date_trunc('day', data) = date_trunc('day', de.data)
        )
        or
        de.data < (
            select max(data)
            from datas
            where
                date_trunc('month', data) = date_trunc('month', de.data)
                and
                data < (select max(data) from datas where have_data) - interval '56 weeks'
        )
)
;
$$;


ALTER FUNCTION public.delete_team_active_members_history() OWNER TO folding;

--
-- TOC entry 274 (class 1255 OID 35454)
-- Name: donor_monthly(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION donor_monthly() RETURNS boolean
    LANGUAGE plpythonu
    AS $_$import psycopg2 as db
import sys
connection = db.connect("host=localhost dbname=folding user=folding")
cursor = connection.cursor()
insert = connection.cursor()

def fetchsome(cursor, chunk=50000):
   while True:
      rs = cursor.fetchmany(chunk)
      if not rs: break
      for row in rs: yield row

query = """
select
   extract(day from current_timestamp)::integer,
   extract(hour from current_timestamp)::integer;
"""
cursor.execute(query)
day, hour = cursor.fetchall()[0]

if day != 1 or hour < 1 or hour > 3:
   connection.close()
   sys.exit()

query = """
prepare insert_query(integer, real, integer, integer) as
insert into donor_monthly
(donor, points, team_rank, batch)
values ($1, $2, $3, $4);
"""
cursor.execute(query);

query = """
select um.data from (
   select distinct u.data
   from usuarios as u
   inner join datas as d on d.data_serial = u.data
   where
      date_trunc('day', d.data) = date_trunc('day',
         (
         d.data + interval '1 month')::date -
         extract('day' from d.data + interval '1 month')::integer
         )
      and
      extract('month' from d.data) < extract('month' from current_date at time zone 'utc')
      and
      d.data_serial = (select data_serial
         from datas
         where date_trunc('day', d.data) = date_trunc('day', data)
         order by data desc
         limit 1)
   union
   select distinct data
   from donors_old) as um
inner join datas as d on d.data_serial = um.data
order by d.data desc;
"""
cursor.execute(query)
rs = [row[0] for row in cursor.fetchall()]
#print rs

query = """
select distinct batch
from donor_monthly
"""
cursor.execute(query)
dm = dict.fromkeys([row[0] for row in cursor.fetchall()])
#print dm

query = """
select d0.donor,
   d0.points - coalesce(d1.points, 0) as points, n_time
from union_monthly_rank(%s) as d0
left outer join union_monthly_rank(%s) as d1
   on d0.donor = d1.donor
inner join usuarios_indice as ui
   on ui.usuario_serial = d0.donor
order by n_time, points desc
;
"""

for i, batch in enumerate(rs[:-1]):
   #if i > 1: break
   if batch in dm: continue
   #print i, batch, rs[i +1]

   cursor.execute(query, (batch, rs[i +1]))
   rsi = fetchsome(cursor)

   team0 = -1
   for (donor, points, team) in rsi:
      if team == team0: rank += 1
      else: rank = 1
      insert.execute("execute insert_query(%s, %s, %s, %s)", (donor, points, rank, batch))
      team0 = team

   connection.commit()

connection.close()
$_$;


ALTER FUNCTION public.donor_monthly() OWNER TO folding;

--
-- TOC entry 275 (class 1255 OID 35455)
-- Name: donor_quarterly_rank_query(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION donor_quarterly_rank_query(v_quarter integer, v_team integer, v_year integer) RETURNS SETOF type_donor_quarterly_rank
    LANGUAGE plpgsql STABLE STRICT
    AS $$
declare
line type_donor_quarterly_rank;
a_month smallint[];
cur_month smallint;
cur_year smallint;
cur_month_in boolean;

begin
a_month[1] := v_quarter * 3 - 2;
a_month[2] := v_quarter * 3 - 1;
a_month[3] := v_quarter * 3;
cur_month := extract(month from (select last_date from last_date));
cur_year := extract(year from (select last_date from last_date));
cur_month_in := (cur_month = any (a_month) and cur_year = v_year);
if cur_month_in then
   if cur_month < a_month[3] then a_month[3] := -1; end if;
   if cur_month < a_month[2] then a_month[2] := -1; end if;
else cur_month := -1;
end if;
for line in
select
   ui.usuario_serial, ui.usuario_nome,
   case when a_month[1] = cur_month then dp.pontos_month    else points[a_month[1]]       end as p1,
   case when a_month[2] = cur_month then dp.pontos_month    else points[a_month[2]]       end as p2,
   case when a_month[3] = cur_month then dp.pontos_month    else points[a_month[3]]       end as p3,
   case when a_month[1] = cur_month then dp.rank_month_time else team_rank[a_month[1]]    end as tr1,
   case when a_month[2] = cur_month then dp.rank_month_time else team_rank[a_month[2]]    end as tr2,
   case when a_month[3] = cur_month then dp.rank_month_time else team_rank[a_month[3]]    end as tr3,
   case when a_month[1] = cur_month then dp.rank_month      else project_rank[a_month[1]] end as pr1,
   case when a_month[2] = cur_month then dp.rank_month      else project_rank[a_month[2]] end as pr2,
   case when a_month[3] = cur_month then dp.rank_month      else project_rank[a_month[3]] end as pr3,
   coalesce(points[a_month[1]], 0) + coalesce(points[a_month[2]], 0) + coalesce(points[a_month[3]], 0) + coalesce(dp.pontos_month, 0) as qt
from usuarios_indice as ui
left join donor_yearly as dy
   on ui.usuario_serial = dy.donor and "year" = v_year
left join donors_production as dp
   on ui.usuario_serial = dp.usuario and cur_month_in
where ui.n_time = v_team
   and coalesce(points[a_month[1]], 0) + coalesce(points[a_month[2]], 0) + coalesce(points[a_month[3]], 0) + coalesce(dp.pontos_month, 0) > 0

loop
return next line;
end loop;

return;
end;
$$;


ALTER FUNCTION public.donor_quarterly_rank_query(v_quarter integer, v_team integer, v_year integer) OWNER TO folding;

--
-- TOC entry 276 (class 1255 OID 35456)
-- Name: donor_quarterly_rank_query_count(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION donor_quarterly_rank_query_count(v_quarter integer, v_team integer, v_year integer) RETURNS integer
    LANGUAGE plpgsql STABLE STRICT
    AS $$
declare
a_month smallint[];
cur_month smallint;
cur_year smallint;
cur_month_in boolean;

begin
a_month[1] := v_quarter * 3 - 2;
a_month[2] := v_quarter * 3 - 1;
a_month[3] := v_quarter * 3;
cur_month := extract(month from (select last_date from last_date));
cur_year := extract(year from (select last_date from last_date));
cur_month_in := (cur_month = any (a_month) and cur_year = v_year);
if cur_month_in then
   if cur_month < a_month[3] then a_month[3] := -1; end if;
   if cur_month < a_month[2] then a_month[2] := -1; end if;
else cur_month := -1;
end if;

return (
select count(ui.usuario_serial)
from usuarios_indice as ui
left join donor_yearly as dy
   on ui.usuario_serial = dy.donor and "year" = v_year
left join donors_production as dp
   on ui.usuario_serial = dp.usuario and cur_month_in
where ui.n_time = v_team
   and coalesce(points[a_month[1]], 0) + coalesce(points[a_month[2]], 0) + coalesce(points[a_month[3]], 0) + coalesce(dp.pontos_month, 0) > 0
);

end;
$$;


ALTER FUNCTION public.donor_quarterly_rank_query_count(v_quarter integer, v_team integer, v_year integer) OWNER TO folding;

--
-- TOC entry 277 (class 1255 OID 35457)
-- Name: in_day_batch_number(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION in_day_batch_number(integer) RETURNS integer
    LANGUAGE sql STABLE STRICT
    AS $_$select (extract(hour from data)::integer / 3) + 1 as batch
from datas
where data_serial = $1
/*
select count(*)::integer as batch
from datas
where data <= (select data from datas where data_serial = $1) and
  date_trunc('day', (select data from datas where data_serial = $1)) =
  date_trunc('day', data)*/
;
$_$;


ALTER FUNCTION public.in_day_batch_number(integer) OWNER TO folding;

--
-- TOC entry 278 (class 1255 OID 35459)
-- Name: insert_donor_first_wu(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_donor_first_wu(integer) RETURNS void
    LANGUAGE sql STRICT
    AS $_$insert into donor_first_wu (donor, data)
select $1, (
  select min(d.data)
  from usuarios as u
  inner join datas as d on u.data = d.data_serial
  where usuario = $1
  )
$_$;


ALTER FUNCTION public.insert_donor_first_wu(integer) OWNER TO folding;

--
-- TOC entry 279 (class 1255 OID 35460)
-- Name: insert_donor_milestones(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_donor_milestones() RETURNS boolean
    LANGUAGE plpythonu STRICT
    AS $$import psycopg2
import sys
sys.path.append("/folding/scripts/python")
from setup import connStr

db = psycopg2.connect(connStr["backend"])
cursor = db.cursor()

query = """\
select d1_serial, d0_serial
from select_two_consecutive_serial_dates() as tcsd
inner join datas as d on d.data_serial = tcsd.d1_serial
where d.data >= (select max(data) from datas)
    - '7 weeks'::interval
order by d.data
;"""
cursor.execute(query)
serial_dates = cursor.fetchall()


query = """\
select distinct serial_date
from donor_milestones
;"""

cursor.execute(query)
l = [d[0] for d in cursor.fetchall()]
l = dict(zip(l, [None for d in l]))

serial_dates = [d for d in serial_dates if d[0] not in l]
del(l)

for d1, d0 in serial_dates:

    query = """\
    insert into donor_milestones (donor, serial_date, milestone)
    select u0.usuario, u1.data, milestone_ref
    from usuarios u1
    left outer join usuarios u0 on u0.usuario = u1.usuario
    inner join donor_milestones_ref dmr on
        u1.pontos >= milestone_points
        and
        milestone_points > coalesce(u0.pontos, 0)
    where u1.data = %s and u0.data = %s
    ;""" % (d1, d0)

    cursor.execute(query)

cursor.close()
db.commit()
db.close()
$$;


ALTER FUNCTION public.insert_donor_milestones() OWNER TO folding;

--
-- TOC entry 280 (class 1255 OID 35461)
-- Name: insert_new_members_temp(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_new_members_temp(integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$declare
  ultima_data timestamptz;
  ultima_data_serial_n integer;
  days varchar;
begin

days = $1::text;
ultima_data := (select data from datas order by data desc limit 1);
ultima_data_serial_n := (
  select data_serial from datas
  where data >= ultima_data - ((days || ' day')::interval)
  order by data asc limit 1
  );
insert into new_members_temp (
  donor, data)
select nm.usuario as usuario,
  min (d1.data) as data
from (
  select usuario_serial as usuario
    from usuarios_indice as ui
    inner join usuarios_producao_temp as up on ui.usuario_serial = up.usuario
    where up.pontos_14 > 0
  except
  select u.usuario
    from usuarios as u
    inner join usuarios_producao_temp as up on u.usuario = up.usuario
    where data = ultima_data_serial_n and up.pontos_14 > 0
  ) as nm
inner join usuarios as u on nm.usuario = u.usuario
inner join datas as d1 on d1.data_serial = u.data
group by nm.usuario
;
return;
end;
$_$;


ALTER FUNCTION public.insert_new_members_temp(integer) OWNER TO folding;

--
-- TOC entry 281 (class 1255 OID 35462)
-- Name: insert_project_total_teams_production_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_project_total_teams_production_temp() RETURNS void
    LANGUAGE sql STRICT
    AS $$insert into teams_production_temp (
  n_time,
  pontos_0,
  pontos_24,
  pontos_7,
  pontos_up,
  active_members,
  new_members,
  rank_0,
  rank_7,
  rank_24,
  rank_30,
  active
  )
select
  -1,
  sum(pontos_0),
  sum(pontos_24),
  sum(pontos_7),
  sum(pontos_up),
  sum(active_members),
  sum(new_members),
  0, 0, 0, 0, 'True'
from teams_production_temp
;$$;


ALTER FUNCTION public.insert_project_total_teams_production_temp() OWNER TO folding;

--
-- TOC entry 282 (class 1255 OID 35463)
-- Name: insert_team_active_members_history(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_team_active_members_history() RETURNS void
    LANGUAGE plpgsql
    AS $_$

declare par record;
begin

for par in
    with datas as (
        select *
        from datas
        where have_data
    ), d0 as (
        select max(data)::date as data
        from datas
    ), d8 as (
        select data
        from datas d
        where
            data between (select data from d0) - interval '8 weeks' and (select data from d0)
            and data = (
                select max(data)
                from datas
                where date_trunc('day', data) = date_trunc('day', d.data)
            )
    ), par as (
        select
            d0.data as d0,
            max(d1.data) as d1
        from d8 d0
        inner join d8 d1 on
            d1.data <= d0.data - interval '50 days'
        group by d0
    ), team_history_batch as (
        select distinct serial_date as batch
        from team_active_members_history
        where team_number = 0
    )
    select d0.data_serial as b0, d1.data_serial as b1
    from par p
    inner join datas d0 on p.d0 = d0.data
    inner join datas d1 on p.d1 = d1.data
    where d0.data_serial not in (select batch from team_history_batch)
    order by p.d0 desc
loop
    execute format('
        insert into team_active_members_history
        (team_number, active_members, serial_date)
        select n_time, active, %2$s
        from (
            select
                n_time,
                count(*) as active
            from usuarios u0
            left outer join usuarios u50 on
                u0.usuario = u50.usuario
                and
                u50.data = %1$s
            inner join usuarios_indice ui on u0.usuario = ui.usuario_serial
            where
                u0.data = %2$s
                and
                u0.pontos > coalesce(u50.pontos, 0)
            group by n_time
            order by n_time
        ) s
        where active > 0
    ', par.b1, par.b0);
end loop;
end;
$_$;


ALTER FUNCTION public.insert_team_active_members_history() OWNER TO folding;

--
-- TOC entry 289 (class 1255 OID 35464)
-- Name: insert_teams_production_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION insert_teams_production_temp() RETURNS void
    LANGUAGE sql STRICT
    AS $$insert into teams_production_temp (
    n_time,
    pontos_0,
    pontos_up,
    pontos_24,
    pontos_7,
    active
    )
select
    t0.n_time,
    t0.pontos,
    t0.pontos - coalesce(tup.pontos, 0),
    t0.pontos - coalesce(t24.pontos, 0),
    t0.pontos - coalesce(t7.pontos, 0),
    t0.pontos > coalesce(t50.pontos, 0) as active
from times as t0
left outer join times as tup
    on t0.n_time = tup.n_time
    and
    tup.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '3 hours'
            order by data desc
            limit 1
            )
left outer join times as t24
    on t0.n_time = t24.n_time
    and
    t24.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '1 day'
            order by data desc
            limit 1
            )
left outer join times as t7
    on t0.n_time = t7.n_time
    and
    t7.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '7 day'
            order by data desc
            limit 1
            )
left outer join times as t50
    on t0.n_time = t50.n_time
    and
    t50.data = (select data_serial
            from datas
            where have_data and data <=
              (select data from datas order by data desc limit 1) -
              interval '50 day'
            order by data desc
            limit 1
            )
where
t0.data = (select data_serial from datas order by data desc limit 1)
;$$;


ALTER FUNCTION public.insert_teams_production_temp() OWNER TO folding;

--
-- TOC entry 290 (class 1255 OID 35465)
-- Name: isodow(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION isodow(timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
declare
begin
return (extract (dow from $1) +6)::int % 7;
end;$_$;


ALTER FUNCTION public.isodow(timestamp with time zone) OWNER TO folding;

--
-- TOC entry 291 (class 1255 OID 35466)
-- Name: kstime(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION kstime() RETURNS text
    LANGUAGE sql
    AS $$select to_char(to_timestamp(timeofday(), 'Dy Mon DD HH24:MI:SS.US YYYY'), 'YYYY-MM-DD HH24:MI:SS');$$;


ALTER FUNCTION public.kstime() OWNER TO folding;

--
-- TOC entry 292 (class 1255 OID 35467)
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO folding;

--
-- TOC entry 293 (class 1255 OID 35468)
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_validator';


ALTER FUNCTION public.plpgsql_validator(oid) OWNER TO folding;

--
-- TOC entry 294 (class 1255 OID 35469)
-- Name: select_donor_already_in_donor_first_wu(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_donor_already_in_donor_first_wu() RETURNS SETOF integer
    LANGUAGE sql STABLE STRICT
    AS $$select donor
from donor_first_wu
$$;


ALTER FUNCTION public.select_donor_already_in_donor_first_wu() OWNER TO folding;

--
-- TOC entry 295 (class 1255 OID 35470)
-- Name: select_donors_data(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_donors_data(integer) RETURNS SETOF integer
    LANGUAGE plpgsql STABLE STRICT
    AS $_$
declare
batch int := (
	select data_serial from datas
	where have_data and
		data >= (select max(data) from datas)
			- (($1::text || ' week')::interval)
	order by data asc limit 1
);
begin
return query execute '
select usuario
from usuarios
where data = $1
' using batch;
return;
end
;$_$;


ALTER FUNCTION public.select_donors_data(integer) OWNER TO folding;

--
-- TOC entry 179 (class 1259 OID 35471)
-- Name: donor_first_wu; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_first_wu (
    donor integer NOT NULL,
    data timestamp with time zone
);


ALTER TABLE donor_first_wu OWNER TO folding;

--
-- TOC entry 296 (class 1255 OID 35474)
-- Name: select_new_members(integer, integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_new_members(integer, integer) RETURNS SETOF donor_first_wu
    LANGUAGE sql STABLE STRICT
    AS $_$select count(donor)::integer, date_trunc('day', d.data) as data_day
from donor_first_wu as dfw
inner join usuarios_indice as ui on
  dfw.donor = ui.usuario_serial and ui.n_time = $1
right outer join datas as d on dfw.data = d.data
where
  date_trunc('day', d.data) > (
    select date_trunc('day', data)
    from datas
    order by data desc limit 1
    ) - (($2::text || ' week')::interval)
group by data_day
$_$;


ALTER FUNCTION public.select_new_members(integer, integer) OWNER TO folding;

--
-- TOC entry 297 (class 1255 OID 35475)
-- Name: select_team_size_table(integer, integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_team_size_table(integer, integer) RETURNS SETOF type_select_team_size_table
    LANGUAGE sql STABLE STRICT
    AS $_$select
  donor::smallInt as new_members,
  active_members,
  d.data::date as day,
  isodow(d.data::date)::smallInt as dow
from
  team_active_members_history as tam
  inner join
  datas as d on d.data_serial = tam.serial_date
  inner join
  select_new_members($1, $2) as nm on nm.data::date = d.data::date
where
  team_number = $1
  and
  d.data_serial = (
    select data_serial
    from datas
    where date_trunc('day', data) = date_trunc('day', d.data)
    order by data desc
    limit 1
    )
;
$_$;


ALTER FUNCTION public.select_team_size_table(integer, integer) OWNER TO folding;

--
-- TOC entry 298 (class 1255 OID 35476)
-- Name: select_two_consecutive_serial_dates(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_two_consecutive_serial_dates() RETURNS SETOF type_two_serial_dates_x_days
    LANGUAGE sql STABLE STRICT
    AS $$
select
  data_serial as d1_serial,
  (
  select data_serial
  from datas
  where data < de.data
  order by data desc
  limit 1
  ) as d0_serial
from datas as de
where data <> (select data from datas order by data limit 1)
order by data desc
;
$$;


ALTER FUNCTION public.select_two_consecutive_serial_dates() OWNER TO folding;

--
-- TOC entry 299 (class 1255 OID 35477)
-- Name: select_two_serial_dates_x_days(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_two_serial_dates_x_days(integer) RETURNS SETOF type_two_serial_dates_x_days
    LANGUAGE sql STABLE STRICT
    AS $_$select data_serial as d1_serial,
  coalesce((
    select data_serial
    from (select data, data_serial from datas where have_data) as dhd
    where
      date_trunc('day', de.data - ($1::text ||' days')::interval) =
      date_trunc('day', dhd.data)
      and
      in_day_batch_number(dhd.data_serial) =
      in_day_batch_number(de.data_serial)
    ), (
    select data_serial
    from (select data, data_serial from datas where have_data) as dhd
    where
      de.data - ($1::text ||' days')::interval >=
      dhd.data
    order by data desc
    limit 1
    )) as d0_serial
from datas as de
where have_data and
  data <> (select data from datas order by data limit 1)
order by data desc
;
$_$;


ALTER FUNCTION public.select_two_serial_dates_x_days(integer) OWNER TO folding;

--
-- TOC entry 300 (class 1255 OID 35478)
-- Name: select_two_serial_dates_x_days_last_batch(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION select_two_serial_dates_x_days_last_batch(integer) RETURNS SETOF type_two_serial_dates_x_days
    LANGUAGE sql STABLE STRICT
    AS $_$select d1_serial, d0_serial
from select_two_serial_dates_x_days($1) as tsd
inner join datas as d
on d.data_serial = tsd.d1_serial
where d.data_serial = (
  select data_serial
  from datas
  where have_data and
    date_trunc('day', data) = date_trunc('day', d.data)
  order by data desc
  limit 1
  )
;
$_$;


ALTER FUNCTION public.select_two_serial_dates_x_days_last_batch(integer) OWNER TO folding;

--
-- TOC entry 301 (class 1255 OID 35479)
-- Name: subteam_group_name(text, text); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION subteam_group_name(name text, pattern text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
begin
if name ~ pattern then
  return substring(upper(name) from pattern);
else
  return name;
end if;
end;
$$;


ALTER FUNCTION public.subteam_group_name(name text, pattern text) OWNER TO folding;

--
-- TOC entry 302 (class 1255 OID 35480)
-- Name: subteam_group_name(text, text, boolean); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION subteam_group_name(name text, pattern text, case_sensitive boolean) RETURNS text
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
declare
name_cs text;
begin
if name ~ pattern then
  if case_sensitive then
    name_cs := name;
  else name_cs := upper(name);
  end if;
  return substring(name_cs from pattern);
else
  return name;
end if;
end;
$$;


ALTER FUNCTION public.subteam_group_name(name text, pattern text, case_sensitive boolean) OWNER TO folding;

--
-- TOC entry 303 (class 1255 OID 35481)
-- Name: team_production(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION team_production(integer) RETURNS SETOF type_team_production
    LANGUAGE plpgsql STABLE STRICT
    AS $_$declare
  team_production type_team_production;
  linha record;
  points0 real;
  points1 real;
  wus0 integer;
  wus1 integer;
  cur_batch_date timestamp;
begin

cur_batch_date := (select data from datas order by data desc limit 1);
points0 := coalesce((
  select pontos
  from times inner join datas on times.data = datas.data_serial
  where n_time = $1 and datas.data in (
    select ymdhm from (
      select date_trunc ('day', datas.data)::date as ymd, max (data) as ymdhm
      from datas
      where date_trunc('day', data) < (select cur_batch_date - interval '55 days 23 hour')
      group by ymd
      order by ymd desc
      limit 1
      ) as max
  )
  ), 0);

wus0 := coalesce((
  select wus
  from times inner join datas on times.data = datas.data_serial
  where n_time = $1 and datas.data in (
    select ymdhm from (
      select date_trunc ('day', datas.data)::date as ymd, max (data) as ymdhm
      from datas
      where date_trunc('day', data) < (select cur_batch_date - interval '55 days 23 hour')
      group by ymd
      order by ymd desc
      limit 1
      ) as max
  )
  ), 0);

for linha in
-- -----------------------------------
select pontos , wus, 'day', datas.data as d0
from times inner join datas on times.data = datas.data_serial
where n_time = $1 and datas.data in (
  select ymdhm from (
    select date_trunc('day', datas.data)::date as ymd, max (data) as ymdhm
    from datas
    where data >= (select cur_batch_date - interval '55 days 1 hour')
    group by ymd
    ) as max
)
order by datas.data
-- -----------------------------------
loop
points1 := linha.pontos - points0;
points0 := linha.pontos;
wus1 := linha.wus - wus0;
wus0 := linha.wus;
  select f.points1, f.wus1, "date" into team_production
  from (select points1, wus1, linha.d0 as "date") as f;
  return next team_production;
end loop;
return;
end;$_$;


ALTER FUNCTION public.team_production(integer) OWNER TO folding;

--
-- TOC entry 304 (class 1255 OID 35482)
-- Name: team_update_production(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION team_update_production(integer) RETURNS SETOF type_team_production
    LANGUAGE plpgsql STABLE STRICT
    AS $_$declare
  team_production type_team_production;
  linha record;
  points0 real;
  points1 real;
  wus0 integer;
  wus1 integer;
begin

points0 := coalesce((
select pontos
from times inner join datas on times.data = datas.data_serial
where n_time = $1 and datas.data <=
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data desc
limit 1
), 0);

wus0 := coalesce((
select wus
from times inner join datas on times.data = datas.data_serial
where n_time = $1 and datas.data <=
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data desc
limit 1
), 0);

for linha in
-- -----------------------------------
select pontos , wus, 'day', datas.data as d0
from times inner join datas on times.data = datas.data_serial
where n_time = $1 and datas.data >
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data
-- -----------------------------------
loop
points1 := linha.pontos - points0;
points0 := linha.pontos;
wus1 := linha.wus - wus0;
wus0 := linha.wus;
  select f.points1, f.wus1, date into team_production
  from (select points1, wus1, linha.d0 as date) as f;
  return next team_production;
end loop;
return;
end;$_$;


ALTER FUNCTION public.team_update_production(integer) OWNER TO folding;

--
-- TOC entry 305 (class 1255 OID 35484)
-- Name: union_monthly_rank(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION union_monthly_rank(integer) RETURNS SETOF type_monthly_rank
    LANGUAGE sql STABLE STRICT
    AS $_$select usuario, pontos, data
from usuarios
where data = $1
union
select usuario, pontos, data
from donor_work_old
where data = $1
$_$;


ALTER FUNCTION public.union_monthly_rank(integer) OWNER TO folding;

--
-- TOC entry 306 (class 1255 OID 35485)
-- Name: update_donor_first_wu(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_donor_first_wu() RETURNS boolean
    LANGUAGE plpythonu STRICT
    AS $$import psycopg2
import sys
sys.path.append("/folding/scripts/python")
from setup import connStr

db = psycopg2.connect(connStr["backend"])
cursor = db.cursor()
cursor.execute("select select_donors_data(0);")
donors_d0 = [linha[0] for linha in cursor.fetchall()]
cursor.execute("select select_donors_data(100);")
raw_list = [linha[0] for linha in cursor.fetchall()]
donors_d1 = dict.fromkeys(raw_list, None)
del(raw_list)
nm = [donor for donor in donors_d0 if donor not in donors_d1]
del(donors_d0)
del(donors_d1)
cursor.execute("select select_donor_already_in_donor_first_wu()");
raw_list = [linha[0] for linha in cursor.fetchall()]
donors_already_in = dict.fromkeys(raw_list, None)
del(raw_list)
for donor in [donor for donor in nm if donor not in donors_already_in]:
  cursor.execute("select insert_donor_first_wu(" + str(donor) + ");")
cursor.close()
db.commit()
db.close()
$$;


ALTER FUNCTION public.update_donor_first_wu() OWNER TO folding;

--
-- TOC entry 309 (class 1255 OID 35486)
-- Name: update_donor_yearly(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_donor_yearly() RETURNS void
    LANGUAGE plpythonu STRICT
    AS $_$
import psycopg2 as db
import sys
sys.path.append("/folding/scripts/python")
from setup import connStr

connection = db.connect(connStr["backend"])
cursor = connection.cursor()
update = connection.cursor()

def fetchsome(cursor, chunk=50000):
   while True:
      rs = cursor.fetchmany(chunk)
      if not rs: break
      for row in rs: yield row

query = """
select
   extract(day from current_timestamp)::integer,
   extract(hour from current_timestamp)::integer;
"""
cursor.execute(query)
day, hour = cursor.fetchall()[0]

if day != 1 or hour < 1 or hour > 3:
   connection.close()
   return

query = """
prepare update_query(integer, smallint, real, integer, integer, smallint) as
select update_donor_yearly($1, $2, $3, $4, $5, $6)
"""
cursor.execute(query);

query = """
select distinct extract(year from um.data)::integer,
   extract(month from um.data)::integer, um.data_serial
from (
select distinct d.data, d.data_serial
from usuarios as u
inner join datas as d on u.data = d.data_serial
where
   u.data = (
      select data_serial
      from datas
      where date_trunc('day', data) = date_trunc('day', d.data)
      order by data desc limit 1
      )
   and
   date_trunc('month', d.data) < date_trunc('month', (select last_date from last_date) at time zone 'utc')
   and
   date_trunc('day', d.data) = (
      select date_trunc('day', data)
      from datas
      where date_trunc('month', data) = date_trunc('month', d.data)
      order by data desc limit 1
      )
union
select distinct d.data, d.data_serial
from donor_work_old as dold
inner join datas as d on d.data_serial = dold.data
) as um
order by extract(year from um.data)::integer desc, extract(month from um.data)::integer desc
"""
cursor.execute(query)
months = cursor.fetchall()
#print months

query_dm = """
select year, months
from donor_yearly_fill
"""

query = """
select d0.donor,
   d0.points - coalesce(d1.points, 0) as points, n_time
from union_monthly_rank(%s) as d0
left outer join union_monthly_rank(%s) as d1
   on d0.donor = d1.donor
inner join usuarios_indice as ui
   on ui.usuario_serial = d0.donor
where d0.points - coalesce(d1.points, 0) > 0
order by points desc
;
"""

for i, (year, month, batch) in enumerate(months[:-1]):
   if i > 1000: break
   cursor.execute(query_dm)
   dm = dict(cursor.fetchall())
   #print 'dm:', dm
   if year in dm:
      if month in dm[year]:
         continue
      update.execute(
         "update donor_yearly_fill set months[array_upper(months, 1) +1] = %s where year = %s",
         (month, year))
   else:
      update.execute("insert into donor_yearly_fill values(%s, array[%s])", (year, month))
   #print i, year, month, batch, months[i +1]
   cursor.execute(query, (batch, months[i +1][2]))
   #print 'fim execute query rsi'
   rsi = fetchsome(cursor)
   project_rank = 0
   team_rank = dict()
   for (donor, points, team) in rsi:
      project_rank += 1
      team_rank[team] = team_rank.get(team, 0) + 1
      update.execute("execute update_query(%s, %s, %s, %s, %s, %s)",
                     (donor, year, points, team_rank[team], project_rank, month))
   connection.commit()

connection.close()
$_$;


ALTER FUNCTION public.update_donor_yearly() OWNER TO folding;

--
-- TOC entry 310 (class 1255 OID 35487)
-- Name: update_donor_yearly(integer, smallint, real, integer, integer, smallint); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_donor_yearly(integer, smallint, real, integer, integer, smallint) RETURNS void
    LANGUAGE plpgsql STRICT
    AS $_$declare
v_donor integer := $1;
v_year smallint := $2;
v_points real := $3;
v_team_rank integer := $4;
v_project_rank integer := $5;
month smallint := $6;
a_points real[] := '{0,0,0,0,0,0,0,0,0,0,0,0}';
a_team_rank integer[] := '{0,0,0,0,0,0,0,0,0,0,0,0}';
a_project_rank integer[] := '{0,0,0,0,0,0,0,0,0,0,0,0}';

begin

update donor_yearly
   set
   points[month] = v_points,
   team_rank[month] = v_team_rank,
   project_rank[month] = v_project_rank
where donor = v_donor and year = v_year;

if not found then
   a_points[month] = v_points;
   a_team_rank[month] = v_team_rank;
   a_project_rank[month] = v_project_rank;
   insert into donor_yearly(
      donor, "year", points, team_rank, project_rank)
      values (v_donor, v_year, a_points, a_team_rank, a_project_rank);
end if;
return;
end;

$_$;


ALTER FUNCTION public.update_donor_yearly(integer, smallint, real, integer, integer, smallint) OWNER TO folding;

--
-- TOC entry 311 (class 1255 OID 35488)
-- Name: update_donors_rank_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_donors_rank_temp() RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
bn_3_hours constant integer := batch_number('3 hours'::interval);
bn_1_day constant integer := batch_number('1 day'::interval);
bn_7_days constant integer := batch_number('7 days'::interval);
bn_50_days constant integer := batch_number('50 days'::interval);
bn_14_days constant integer := batch_number('14 days 3 hours'::interval);
bn_last constant integer := (select data_serial from datas order by data desc limit 1);
bn_dmonth constant integer := (
select data_serial
        from datas
        where
date_trunc('day', data) = date_trunc('day',
(data + interval '1 month')::date -
extract('day' from data + interval '1 month')::integer
)
and
date_trunc('month', data) < date_trunc('month', current_date at time zone 'utc')
order by data desc
limit 1
);

begin
execute format('
insert into donors_production_temp (
    usuario,
    n_time,
    pontos_0,
    pontos_24,
    pontos_7,
    pontos_up,
    active,
    "new",
    pontos_month,
    rank_0,
    rank_0_time,
    rank_24,
    rank_24_time,
    rank_7,
    rank_7_time,
    rank_30,
    rank_30_time,
    rank_month,
    rank_month_time
)
select usuario, n_time,
    pontos_0,
    pontos_24,
    pontos_7,
    pontos_up,
    active,
    "new",
    pontos_month,
    rank() over (order by pontos_0 desc, pontos_7 desc, pontos_24 desc) as rank_0,
    rank() over (partition by n_time order by pontos_0 desc, pontos_7 desc, pontos_24 desc) as rank_0_time,
    rank() over (order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc) as rank_24,
    rank() over (partition by n_time order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc) as rank_24_time,
    rank() over (order by pontos_0 + pontos_7 desc, pontos_0 desc) as rank_7,
    rank() over (partition by n_time order by pontos_0 + pontos_7 desc, pontos_0 desc) as rank_7_time,
    rank() over (order by pontos_0 + (pontos_7 * 30 / 7) desc, pontos_0 desc) as rank_30,
    rank() over (partition by n_time order by pontos_0 + (pontos_7 * 30 / 7) desc, pontos_0 desc) as rank_30_time,
    rank() over (order by pontos_month desc, pontos_0 desc) as rank_month,
    rank() over (partition by n_time order by pontos_month desc, pontos_0 desc) as rank_month_time
from (
    select d0.usuario, usuarios_indice.n_time,
        d0.pontos as pontos_0,
        d0.pontos - coalesce (d1.pontos, 0) as pontos_24,
        d0.pontos - coalesce (d7.pontos, 0) as pontos_7,
        d0.pontos - coalesce (dup.pontos, 0) as pontos_up,
        d0.pontos > coalesce (d50.pontos, 0) as active,
        d0.pontos > coalesce (d14.pontos, 0) and coalesce(d14.pontos, 0) < 1 as "new",
        d0.pontos - coalesce (dmonth.pontos, 0) as pontos_month
    from usuarios as d0
      left outer join usuarios as dup on d0.usuario = dup.usuario and dup.data = %2$s
      left outer join usuarios as d1 on d0.usuario = d1.usuario and d1.data = %3$s
      left outer join usuarios as d7 on d0.usuario = d7.usuario and d7.data = %4$s
      left outer join usuarios as d50 on d0.usuario = d50.usuario and d50.data = %5$s
      left outer join usuarios as d14 on d0.usuario = d14.usuario and d14.data = %6$s
      left outer join usuarios as dmonth on d0.usuario = dmonth.usuario and dmonth.data = %7$s
      inner join usuarios_indice on d0.usuario = usuario_serial
    where
d0.data = %1$s
) sq '
, bn_last, bn_3_hours, bn_1_day, bn_7_days, bn_50_days, bn_14_days, bn_dmonth)
;
end
$_$;


ALTER FUNCTION public.update_donors_rank_temp() OWNER TO folding;

--
-- TOC entry 283 (class 1255 OID 35489)
-- Name: update_donors_rank_temp_text(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_donors_rank_temp_text() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $_$
declare
bn_3_hours constant integer := batch_number('3 hours'::interval);
bn_1_day constant integer := batch_number('1 day'::interval);
bn_7_days constant integer := batch_number('7 days'::interval);
bn_50_days constant integer := batch_number('50 days'::interval);
bn_14_days constant integer := batch_number('14 days 3 hours'::interval);
bn_last constant integer := (select data_serial from datas order by data desc limit 1);
bn_dmonth constant integer := (
select data_serial
        from datas
        where
            date_trunc('day', data) = date_trunc('day',
                (data + interval '1 month')::date -
                extract('day' from data + interval '1 month')::integer
            )
            and
            date_trunc('month', data) < date_trunc('month', current_date at time zone 'utc')
order by data desc
limit 1
);

begin
return format('
insert into donors_production_temp (
    usuario,
    n_time,
    pontos_0,
    pontos_24,
    pontos_7,
    pontos_up,
    active,
    "new",
    pontos_month,
    rank_0,
    rank_0_time,
    rank_24,
    rank_24_time,
    rank_7,
    rank_7_time,
    rank_30,
    rank_30_time,
    rank_month,
    rank_month_time
)
select usuario, n_time,
    pontos_0,
    pontos_24,
    pontos_7,
    pontos_up,
    active,
    "new",
    pontos_month,
    rank() over (order by pontos_0 desc, pontos_7 desc, pontos_24 desc) as rank_0,
    rank() over (partition by n_time order by pontos_0 desc, pontos_7 desc, pontos_24 desc) as rank_0_time,
    rank() over (order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc) as rank_24,
    rank() over (partition by n_time order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc) as rank_24_time,
    rank() over (order by pontos_0 + pontos_7 desc, pontos_0 desc) as rank_7,
    rank() over (partition by n_time order by pontos_0 + pontos_7 desc, pontos_0 desc) as rank_7_time,
    rank() over (order by pontos_0 + (pontos_7 * 30 / 7) desc, pontos_0 desc) as rank_30,
    rank() over (partition by n_time order by pontos_0 + (pontos_7 * 30 / 7) desc, pontos_0 desc) as rank_30_time,
    rank() over (order by pontos_month desc, pontos_0 desc) as rank_month,
    rank() over (partition by n_time order by pontos_month desc, pontos_0 desc) as rank_month_time
from (
    select d0.usuario, usuarios_indice.n_time,
        d0.pontos as pontos_0,
        d0.pontos - coalesce (d1.pontos, 0) as pontos_24,
        d0.pontos - coalesce (d7.pontos, 0) as pontos_7,
        d0.pontos - coalesce (dup.pontos, 0) as pontos_up,
        d0.pontos > coalesce (d50.pontos, 0) as active,
        d0.pontos > coalesce (d14.pontos, 0) and coalesce(d14.pontos, 0) < 1 as "new",
        d0.pontos - coalesce (dmonth.pontos, 0) as pontos_month
    from usuarios as d0
      left outer join usuarios as dup on d0.usuario = dup.usuario and dup.data = %2$s
      left outer join usuarios as d1 on d0.usuario = d1.usuario and d1.data = %3$s
      left outer join usuarios as d7 on d0.usuario = d7.usuario and d7.data = %4$s
      left outer join usuarios as d50 on d0.usuario = d50.usuario and d50.data = %5$s
      left outer join usuarios as d14 on d0.usuario = d14.usuario and d14.data = %6$s
      left outer join usuarios as dmonth on d0.usuario = dmonth.usuario and dmonth.data = %7$s
      inner join usuarios_indice on d0.usuario = usuario_serial
    where
d0.data = %1$s
) sq '
, bn_last, bn_3_hours, bn_1_day, bn_7_days, bn_50_days, bn_14_days, bn_dmonth)
;
end
$_$;


ALTER FUNCTION public.update_donors_rank_temp_text() OWNER TO folding;

--
-- TOC entry 284 (class 1255 OID 35490)
-- Name: update_last_date(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_last_date() RETURNS void
    LANGUAGE sql
    AS $$update last_date
set last_date = (
	select last_date
	from last_date_temp
	order by last_date desc
	limit 1
	);
$$;


ALTER FUNCTION public.update_last_date() OWNER TO folding;

--
-- TOC entry 285 (class 1255 OID 35491)
-- Name: update_last_date_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_last_date_temp() RETURNS void
    LANGUAGE sql STRICT
    AS $$update last_date_temp
set last_date = (
	select data
	from datas
	order by data desc
	limit 1
	);
$$;


ALTER FUNCTION public.update_last_date_temp() OWNER TO folding;

--
-- TOC entry 286 (class 1255 OID 35492)
-- Name: update_team_active_members_temp_2(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_team_active_members_temp_2() RETURNS void
    LANGUAGE sql
    AS $$update teams_production_temp
set active_members = (
  select count(*)
  from donors_production_temp as up
  where up.n_time = teams_production_temp.n_time
and active
  );
$$;


ALTER FUNCTION public.update_team_active_members_temp_2() OWNER TO folding;

--
-- TOC entry 287 (class 1255 OID 35493)
-- Name: update_team_new_members_temp_2(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_team_new_members_temp_2() RETURNS void
    LANGUAGE sql STRICT
    AS $$update teams_production_temp
set new_members = nm.nm
from (
select n_time, count(*) as nm
from donors_production_temp
where "new"
group by n_time
) nm
where teams_production_temp.n_time = nm.n_time
;$$;


ALTER FUNCTION public.update_team_new_members_temp_2() OWNER TO folding;

--
-- TOC entry 288 (class 1255 OID 35494)
-- Name: update_team_total_members_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_team_total_members_temp() RETURNS void
    LANGUAGE sql
    AS $$update teams_production_temp
set total_members = (
  select count(*)
  from donors_production_temp as up
  where up.n_time = teams_production_temp.n_time
  );
$$;


ALTER FUNCTION public.update_team_total_members_temp() OWNER TO folding;

--
-- TOC entry 312 (class 1255 OID 35495)
-- Name: update_teams_rank_temp(); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION update_teams_rank_temp() RETURNS void
    LANGUAGE plpgsql STRICT
    AS $$declare
  linha record;
  rank integer;
begin
rank := 0;
for linha in
  select n_time
  from teams_production_temp
  where n_time != 0
  order by pontos_0 desc, pontos_7, pontos_24 desc
loop
  rank := rank + 1;
  update teams_production_temp
    set rank_0 = rank
    where teams_production_temp.n_time = linha.n_time
;
end loop;
-- ----------------------------------------------------------
rank := 0;
for linha in
  select n_time
  from teams_production_temp
  where n_time != 0
  order by pontos_0 + (pontos_7 / 7) desc, pontos_0 desc
loop
  rank := rank + 1;
  update teams_production_temp
    set rank_24 = rank
    where teams_production_temp.n_time = linha.n_time
;
end loop;
-- ----------------------------------------------------------
rank := 0;
for linha in
  select n_time
  from teams_production_temp
  where n_time != 0
  order by pontos_0 + pontos_7 desc, pontos_0 desc
loop
  rank := rank + 1;
  update teams_production_temp
    set rank_7 = rank
    where teams_production_temp.n_time = linha.n_time
  ;
end loop;
-- ----------------------------------------------------------
rank := 0;
for linha in
  select n_time
  from teams_production_temp
  where n_time != 0
  order by pontos_0 + (pontos_7 * 30 / 7 ) desc, pontos_0 desc
loop
  rank := rank + 1;
  update teams_production_temp
    set rank_30 = rank
    where teams_production_temp.n_time = linha.n_time
  ;
end loop;
-- -----------------------------------------------------------
update teams_production_temp
  set rank_0 = 0,
  rank_7 = 0,
  rank_24 = 0,
  rank_30 = 0
  where n_time in (0)
  ;
return;
end;$$;


ALTER FUNCTION public.update_teams_rank_temp() OWNER TO folding;

--
-- TOC entry 313 (class 1255 OID 35496)
-- Name: user_production(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION user_production(integer) RETURNS SETOF type_team_production
    LANGUAGE plpgsql STABLE STRICT
    AS $_$declare
  user_production type_team_production;
  linha record;
  points0 real;
  points1 real;
  wus0 integer;
  wus1 integer;
  cur_batch_date timestamp;
begin

cur_batch_date := (select data from datas order by data desc limit 1);
points0 := coalesce((
  select pontos
  from usuarios
  inner join datas on usuarios.data = datas.data_serial
  where usuario = $1 and datas.data = (
    select ymdhm from (
      select date_trunc ('day', datas.data)::date as ymd, max (data) as ymdhm
      from datas
      where date_trunc('day', data) < (
        select cur_batch_date - interval '55 days 23 hour'
        )
      group by ymd
      order by ymd desc
      limit 1
      ) as max
  )
), 0);
wus0 := coalesce((
  select wus
  from usuarios
  inner join datas on usuarios.data = datas.data_serial
  where usuario = $1 and datas.data = (
    select ymdhm from (
      select date_trunc ('day', datas.data)::date as ymd, max (data) as ymdhm
      from datas
      where date_trunc('day', data) < (
        select cur_batch_date - interval '55 days 23 hour'
        )
      group by ymd
      order by ymd desc
      limit 1
      ) as max
  )
), 0);

for linha in
-- -----------------------------------
select pontos , wus, 'day', datas.data as d0
from usuarios inner join datas on usuarios.data = datas.data_serial
where usuario = $1 and datas.data in (
  select ymdhm from (
    select date_trunc ('day', datas.data)::date as ymd, max (data) as ymdhm
    from datas
    where data >= (select cur_batch_date - interval '55 days 1 hour')
    group by ymd
    ) as max
)
order by datas.data
-- -----------------------------------
loop
points1 := linha.pontos - points0;
points0 := linha.pontos;
wus1 := linha.wus - wus0;
wus0 := linha.wus;
  select f.points1, f.wus1, "date" into user_production
  from (select points1, wus1, linha.d0 as "date") as f;
  return next user_production;
end loop;
return;
end;
$_$;


ALTER FUNCTION public.user_production(integer) OWNER TO folding;

--
-- TOC entry 314 (class 1255 OID 35497)
-- Name: user_update_production(integer); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION user_update_production(integer) RETURNS SETOF type_team_production
    LANGUAGE plpgsql STABLE
    AS $_$declare
  user_production type_team_production;
  linha record;
  points0 real;
  points1 real;
  wus0 integer;
  wus1 integer;
begin

points0 := coalesce((
select pontos
from usuarios inner join datas on usuarios.data = datas.data_serial
where usuario = $1 and datas.data <=
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data desc
limit 1
), 0);

wus0 := coalesce((
select wus
from usuarios inner join datas on usuarios.data = datas.data_serial
where usuario = $1 and datas.data <=
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data desc
limit 1
), 0);

for linha in
-- -----------------------------------
select pontos , wus, 'day', datas.data as d0
from usuarios inner join datas on usuarios.data = datas.data_serial
where usuario = $1 and datas.data >
  (select (select data from datas order by data desc limit 1) - interval '14 days')
order by datas.data
-- -----------------------------------
loop
points1 := linha.pontos - points0;
points0 := linha.pontos;
wus1 := linha.wus - wus0;
wus0 := linha.wus;
  select f.points1, f.wus1, date into user_production
  from (select points1, wus1, linha.d0 as date) as f;
  return next user_production;
end loop;
return;
end;$_$;


ALTER FUNCTION public.user_update_production(integer) OWNER TO folding;

--
-- TOC entry 307 (class 1255 OID 35498)
-- Name: weekdays(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION weekdays(timestamp with time zone) RETURNS SETOF date
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$select $1::date - isodow($1)
union
select $1::date - isodow($1) +1
union
select $1::date - isodow($1) +2
union
select $1::date - isodow($1) +3
union
select $1::date - isodow($1) +4
union
select $1::date - isodow($1) +5
union
select $1::date - isodow($1) +6
$_$;


ALTER FUNCTION public.weekdays(timestamp with time zone) OWNER TO folding;

--
-- TOC entry 308 (class 1255 OID 35499)
-- Name: yearweek(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: folding
--

CREATE FUNCTION yearweek(timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $_$
declare
date timestamp with time zone = $1;
fyear integer;
begin
fyear :=  extract (year from date - ((isodow (date) -3)::text || ' day')::interval);
return fyear * 100 + extract (week from date);
end;$_$;


ALTER FUNCTION public.yearweek(timestamp with time zone) OWNER TO folding;

--
-- TOC entry 180 (class 1259 OID 35513)
-- Name: datas_data_serial_seq; Type: SEQUENCE; Schema: public; Owner: folding
--

CREATE SEQUENCE datas_data_serial_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE datas_data_serial_seq OWNER TO folding;

--
-- TOC entry 3204 (class 0 OID 0)
-- Dependencies: 180
-- Name: datas_data_serial_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: folding
--

ALTER SEQUENCE datas_data_serial_seq OWNED BY datas.data_serial;


--
-- TOC entry 181 (class 1259 OID 35515)
-- Name: donor_milestones; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_milestones (
    donor integer NOT NULL,
    serial_date integer,
    milestone smallint NOT NULL
);


ALTER TABLE donor_milestones OWNER TO folding;

--
-- TOC entry 182 (class 1259 OID 35518)
-- Name: donor_milestones_ref; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_milestones_ref (
    milestone_ref smallint NOT NULL,
    milestone_points integer
);


ALTER TABLE donor_milestones_ref OWNER TO folding;

--
-- TOC entry 183 (class 1259 OID 35521)
-- Name: donor_work_old; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_work_old (
    usuario integer NOT NULL,
    data integer NOT NULL,
    wus integer NOT NULL,
    pontos real NOT NULL
);


ALTER TABLE donor_work_old OWNER TO folding;

--
-- TOC entry 184 (class 1259 OID 35524)
-- Name: donor_yearly; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_yearly (
    donor integer NOT NULL,
    year smallint NOT NULL,
    points real[] NOT NULL,
    project_rank integer[] NOT NULL,
    team_rank integer[] NOT NULL
);


ALTER TABLE donor_yearly OWNER TO folding;

--
-- TOC entry 185 (class 1259 OID 35530)
-- Name: donor_yearly_fill; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donor_yearly_fill (
    year smallint NOT NULL,
    months smallint[] NOT NULL
);


ALTER TABLE donor_yearly_fill OWNER TO folding;

--
-- TOC entry 186 (class 1259 OID 35536)
-- Name: donors_production; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donors_production (
    usuario integer NOT NULL,
    pontos_7 real NOT NULL,
    pontos_24 real NOT NULL,
    pontos_0 real NOT NULL,
    pontos_up real NOT NULL,
    rank_24 integer,
    rank_7 integer,
    rank_30 integer,
    rank_24_time integer,
    rank_7_time integer,
    rank_30_time integer,
    n_time integer NOT NULL,
    rank_0 integer,
    rank_0_time integer,
    active boolean NOT NULL,
    rank_month integer,
    rank_month_time integer,
    pontos_month real,
    new boolean
);


ALTER TABLE donors_production OWNER TO folding;

--
-- TOC entry 187 (class 1259 OID 35539)
-- Name: donors_production_temp; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE donors_production_temp (
    usuario integer NOT NULL,
    pontos_7 real NOT NULL,
    pontos_24 real NOT NULL,
    pontos_0 real NOT NULL,
    pontos_up real NOT NULL,
    rank_24 integer,
    rank_7 integer,
    rank_30 integer,
    rank_24_time integer,
    rank_7_time integer,
    rank_30_time integer,
    n_time integer NOT NULL,
    rank_0 integer,
    rank_0_time integer,
    active boolean NOT NULL,
    rank_month integer,
    rank_month_time integer,
    pontos_month real,
    new boolean
);


ALTER TABLE donors_production_temp OWNER TO folding;

--
-- TOC entry 188 (class 1259 OID 35542)
-- Name: fazer_times; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE fazer_times (
    n_time integer NOT NULL
);


ALTER TABLE fazer_times OWNER TO folding;

--
-- TOC entry 189 (class 1259 OID 35545)
-- Name: last_date; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE last_date (
    last_date timestamp with time zone NOT NULL
);


ALTER TABLE last_date OWNER TO folding;

--
-- TOC entry 190 (class 1259 OID 35548)
-- Name: last_date_temp; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE last_date_temp (
    last_date timestamp with time zone NOT NULL
);


ALTER TABLE last_date_temp OWNER TO folding;

--
-- TOC entry 191 (class 1259 OID 35551)
-- Name: linha; Type: SEQUENCE; Schema: public; Owner: folding
--

CREATE SEQUENCE linha
    START WITH 9326
    INCREMENT BY 1
    MINVALUE 0
    NO MAXVALUE
    CACHE 1;


ALTER TABLE linha OWNER TO folding;

--
-- TOC entry 192 (class 1259 OID 35553)
-- Name: maintenance; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE maintenance (
    in_now boolean DEFAULT false
);


ALTER TABLE maintenance OWNER TO folding;

--
-- TOC entry 193 (class 1259 OID 35557)
-- Name: processing_end; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE processing_end (
    datetime timestamp with time zone
);


ALTER TABLE processing_end OWNER TO folding;

--
-- TOC entry 194 (class 1259 OID 35560)
-- Name: team_active_members_history; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE team_active_members_history (
    team_number integer NOT NULL,
    active_members integer NOT NULL,
    serial_date integer NOT NULL
);


ALTER TABLE team_active_members_history OWNER TO folding;

--
-- TOC entry 195 (class 1259 OID 35563)
-- Name: teams_production; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE teams_production (
    n_time integer NOT NULL,
    pontos_7 real NOT NULL,
    pontos_24 real NOT NULL,
    pontos_0 real NOT NULL,
    rank_24 integer,
    rank_7 integer,
    rank_30 integer,
    pontos_up real NOT NULL,
    rank_0 integer,
    active_members integer,
    new_members integer DEFAULT 0,
    active boolean NOT NULL,
    total_members integer
);


ALTER TABLE teams_production OWNER TO folding;

--
-- TOC entry 196 (class 1259 OID 35567)
-- Name: teams_production_temp; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE teams_production_temp (
    n_time integer NOT NULL,
    pontos_7 real NOT NULL,
    pontos_24 real NOT NULL,
    pontos_0 real NOT NULL,
    rank_24 integer,
    rank_7 integer,
    rank_30 integer,
    pontos_up real NOT NULL,
    rank_0 integer,
    active_members integer,
    new_members integer DEFAULT 0,
    active boolean NOT NULL,
    total_members integer
);


ALTER TABLE teams_production_temp OWNER TO folding;

--
-- TOC entry 197 (class 1259 OID 35571)
-- Name: temp_tamh; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE temp_tamh (
    team_number integer,
    active_members integer,
    data timestamp with time zone
);


ALTER TABLE temp_tamh OWNER TO folding;

--
-- TOC entry 198 (class 1259 OID 35574)
-- Name: times; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE times (
    n_time integer NOT NULL,
    pontos real NOT NULL,
    wus integer NOT NULL,
    data integer NOT NULL
);


ALTER TABLE times OWNER TO folding;

--
-- TOC entry 199 (class 1259 OID 35577)
-- Name: times_indice; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE times_indice (
    n_time integer NOT NULL,
    time_nome character varying(100) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE times_indice OWNER TO folding;

--
-- TOC entry 200 (class 1259 OID 35581)
-- Name: times_temp; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE times_temp (
    n_time integer NOT NULL,
    time_nome character varying(100) NOT NULL,
    wus integer NOT NULL,
    pontos real NOT NULL
);


ALTER TABLE times_temp OWNER TO folding;

--
-- TOC entry 201 (class 1259 OID 35584)
-- Name: top_times; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE top_times (
    top integer NOT NULL
);


ALTER TABLE top_times OWNER TO folding;

--
-- TOC entry 202 (class 1259 OID 35587)
-- Name: usuarios; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE usuarios (
    usuario integer NOT NULL,
    data integer NOT NULL,
    wus integer NOT NULL,
    pontos real NOT NULL
);


ALTER TABLE usuarios OWNER TO folding;

--
-- TOC entry 203 (class 1259 OID 36791)
-- Name: usuarios_empty_fk; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE usuarios_empty_fk (
    data integer,
    CONSTRAINT usuarios_empty_fk_check CHECK (false)
);


ALTER TABLE usuarios_empty_fk OWNER TO folding;

SET default_with_oids = true;

--
-- TOC entry 204 (class 1259 OID 36795)
-- Name: usuarios_indice; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE usuarios_indice (
    usuario_serial integer NOT NULL,
    usuario_nome character varying(100),
    n_time integer NOT NULL
);


ALTER TABLE usuarios_indice OWNER TO folding;

--
-- TOC entry 205 (class 1259 OID 36798)
-- Name: usuarios_indice_usuario_serial_seq; Type: SEQUENCE; Schema: public; Owner: folding
--

CREATE SEQUENCE usuarios_indice_usuario_serial_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE usuarios_indice_usuario_serial_seq OWNER TO folding;

--
-- TOC entry 3222 (class 0 OID 0)
-- Dependencies: 205
-- Name: usuarios_indice_usuario_serial_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: folding
--

ALTER SEQUENCE usuarios_indice_usuario_serial_seq OWNED BY usuarios_indice.usuario_serial;


SET default_with_oids = false;

--
-- TOC entry 206 (class 1259 OID 36800)
-- Name: usuarios_temp; Type: TABLE; Schema: public; Owner: folding; Tablespace: 
--

CREATE TABLE usuarios_temp (
    usuario character varying(100) NOT NULL,
    wus integer NOT NULL,
    n_time integer NOT NULL,
    pontos real NOT NULL
);


ALTER TABLE usuarios_temp OWNER TO folding;

--
-- TOC entry 207 (class 1259 OID 36803)
-- Name: ver_fazer_times; Type: VIEW; Schema: public; Owner: folding
--

CREATE VIEW ver_fazer_times AS
 SELECT fazer_times.n_time,
    times_indice.time_nome
   FROM (times_indice
     JOIN fazer_times ON ((fazer_times.n_time = times_indice.n_time)));


ALTER TABLE ver_fazer_times OWNER TO folding;

--
-- TOC entry 208 (class 1259 OID 36807)
-- Name: vw_datas; Type: VIEW; Schema: public; Owner: folding
--

CREATE VIEW vw_datas AS
 SELECT datas.data_serial,
    datas.data
   FROM datas
  ORDER BY datas.data DESC;


ALTER TABLE vw_datas OWNER TO folding;

--
-- TOC entry 3034 (class 2604 OID 36811)
-- Name: data_serial; Type: DEFAULT; Schema: public; Owner: folding
--

ALTER TABLE ONLY datas ALTER COLUMN data_serial SET DEFAULT nextval('datas_data_serial_seq'::regclass);


--
-- TOC entry 3040 (class 2604 OID 36812)
-- Name: usuario_serial; Type: DEFAULT; Schema: public; Owner: folding
--

ALTER TABLE ONLY usuarios_indice ALTER COLUMN usuario_serial SET DEFAULT nextval('usuarios_indice_usuario_serial_seq'::regclass);


--
-- TOC entry 3048 (class 2606 OID 36814)
-- Name: donor_milestones_ref_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY donor_milestones_ref
    ADD CONSTRAINT donor_milestones_ref_pkey PRIMARY KEY (milestone_ref);

ALTER TABLE donor_milestones_ref CLUSTER ON donor_milestones_ref_pkey;


--
-- TOC entry 3053 (class 2606 OID 36816)
-- Name: donor_yearly_fill_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY donor_yearly_fill
    ADD CONSTRAINT donor_yearly_fill_pkey PRIMARY KEY (year);


--
-- TOC entry 3050 (class 2606 OID 36818)
-- Name: donor_yearly_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY donor_yearly
    ADD CONSTRAINT donor_yearly_pkey PRIMARY KEY (donor, year);


--
-- TOC entry 3060 (class 2606 OID 36820)
-- Name: fazer_times_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY fazer_times
    ADD CONSTRAINT fazer_times_pkey PRIMARY KEY (n_time);


--
-- TOC entry 3043 (class 2606 OID 36824)
-- Name: pk_data; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY datas
    ADD CONSTRAINT pk_data PRIMARY KEY (data);


--
-- TOC entry 3045 (class 2606 OID 36826)
-- Name: pk_donor_first_wu; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY donor_first_wu
    ADD CONSTRAINT pk_donor_first_wu PRIMARY KEY (donor);

ALTER TABLE donor_first_wu CLUSTER ON pk_donor_first_wu;


--
-- TOC entry 3068 (class 2606 OID 36828)
-- Name: times_indice_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY times_indice
    ADD CONSTRAINT times_indice_pkey PRIMARY KEY (n_time);

ALTER TABLE times_indice CLUSTER ON times_indice_pkey;


--
-- TOC entry 3070 (class 2606 OID 36830)
-- Name: times_temp_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY times_temp
    ADD CONSTRAINT times_temp_pkey PRIMARY KEY (n_time);


--
-- TOC entry 3072 (class 2606 OID 36832)
-- Name: usuarios_empty_fk_data_key; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY usuarios_empty_fk
    ADD CONSTRAINT usuarios_empty_fk_data_key UNIQUE (data);


--
-- TOC entry 3074 (class 2606 OID 36834)
-- Name: usuarios_indice_pkey; Type: CONSTRAINT; Schema: public; Owner: folding; Tablespace: 
--

ALTER TABLE ONLY usuarios_indice
    ADD CONSTRAINT usuarios_indice_pkey PRIMARY KEY (usuario_serial);

ALTER TABLE usuarios_indice CLUSTER ON usuarios_indice_pkey;


--
-- TOC entry 3041 (class 1259 OID 36835)
-- Name: data_ndx; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE UNIQUE INDEX data_ndx ON datas USING btree (data_serial);

ALTER TABLE datas CLUSTER ON data_ndx;


--
-- TOC entry 3046 (class 1259 OID 36836)
-- Name: donor_milestones_ndx; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX donor_milestones_ndx ON donor_milestones USING btree (donor);

ALTER TABLE donor_milestones CLUSTER ON donor_milestones_ndx;


--
-- TOC entry 3054 (class 1259 OID 36838)
-- Name: ndx_active_donor_production; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_active_donor_production ON donors_production USING btree (active);


--
-- TOC entry 3062 (class 1259 OID 1603959)
-- Name: ndx_active_teams_production; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_active_teams_production ON teams_production USING btree (active);


--
-- TOC entry 3055 (class 1259 OID 36840)
-- Name: ndx_donor_production; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_donor_production ON donors_production USING btree (usuario);


--
-- TOC entry 3057 (class 1259 OID 1603952)
-- Name: ndx_donor_production_temp; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_donor_production_temp ON donors_production_temp USING btree (usuario);


--
-- TOC entry 3051 (class 1259 OID 36842)
-- Name: ndx_donor_yearly_year; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_donor_yearly_year ON donor_yearly USING btree (year);

ALTER TABLE donor_yearly CLUSTER ON ndx_donor_yearly_year;


--
-- TOC entry 3056 (class 1259 OID 36843)
-- Name: ndx_n_time_donor_production; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_n_time_donor_production ON donors_production USING btree (n_time);


--
-- TOC entry 3058 (class 1259 OID 1603953)
-- Name: ndx_n_time_donor_production_temp; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_n_time_donor_production_temp ON donors_production_temp USING btree (n_time);


--
-- TOC entry 3061 (class 1259 OID 36845)
-- Name: ndx_team_active_members_history; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_team_active_members_history ON team_active_members_history USING btree (team_number);

ALTER TABLE team_active_members_history CLUSTER ON ndx_team_active_members_history;


--
-- TOC entry 3063 (class 1259 OID 1603958)
-- Name: ndx_teams_production; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_teams_production ON teams_production USING btree (n_time);


--
-- TOC entry 3064 (class 1259 OID 36847)
-- Name: ndx_teams_production_temp; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_teams_production_temp ON teams_production_temp USING btree (n_time);


--
-- TOC entry 3065 (class 1259 OID 36848)
-- Name: ndx_times_data; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_times_data ON times USING btree (data);


--
-- TOC entry 3066 (class 1259 OID 36849)
-- Name: ndx_times_time_data; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX ndx_times_time_data ON times USING btree (n_time, data);

ALTER TABLE times CLUSTER ON ndx_times_time_data;


--
-- TOC entry 3075 (class 1259 OID 37150)
-- Name: usuarios_temp_ndx; Type: INDEX; Schema: public; Owner: folding; Tablespace: 
--

CREATE INDEX usuarios_temp_ndx ON usuarios_temp USING btree (n_time, usuario);


--
-- TOC entry 3077 (class 2606 OID 37152)
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: folding
--

ALTER TABLE ONLY times
    ADD CONSTRAINT "$1" FOREIGN KEY (n_time) REFERENCES times_indice(n_time) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 3078 (class 2606 OID 37157)
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: folding
--

ALTER TABLE ONLY times
    ADD CONSTRAINT "$2" FOREIGN KEY (data) REFERENCES datas(data_serial) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 3076 (class 2606 OID 37162)
-- Name: donor_work_old_data_fkey; Type: FK CONSTRAINT; Schema: public; Owner: folding
--

ALTER TABLE ONLY donor_work_old
    ADD CONSTRAINT donor_work_old_data_fkey FOREIGN KEY (data) REFERENCES usuarios_empty_fk(data);


--
-- TOC entry 3079 (class 2606 OID 38672)
-- Name: usuarios_data_fkey; Type: FK CONSTRAINT; Schema: public; Owner: folding
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT usuarios_data_fkey FOREIGN KEY (data) REFERENCES usuarios_empty_fk(data);


--
-- TOC entry 3198 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: folding
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM folding;
GRANT ALL ON SCHEMA public TO folding;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 3202 (class 0 OID 0)
-- Dependencies: 178
-- Name: datas; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE datas FROM PUBLIC;
REVOKE ALL ON TABLE datas FROM folding;
GRANT ALL ON TABLE datas TO folding;
GRANT SELECT ON TABLE datas TO folding_web;


--
-- TOC entry 3203 (class 0 OID 0)
-- Dependencies: 179
-- Name: donor_first_wu; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donor_first_wu FROM PUBLIC;
REVOKE ALL ON TABLE donor_first_wu FROM folding;
GRANT ALL ON TABLE donor_first_wu TO folding;
GRANT SELECT ON TABLE donor_first_wu TO folding_web;


--
-- TOC entry 3205 (class 0 OID 0)
-- Dependencies: 181
-- Name: donor_milestones; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donor_milestones FROM PUBLIC;
REVOKE ALL ON TABLE donor_milestones FROM folding;
GRANT ALL ON TABLE donor_milestones TO folding;
GRANT SELECT ON TABLE donor_milestones TO folding_web;


--
-- TOC entry 3206 (class 0 OID 0)
-- Dependencies: 182
-- Name: donor_milestones_ref; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donor_milestones_ref FROM PUBLIC;
REVOKE ALL ON TABLE donor_milestones_ref FROM folding;
GRANT ALL ON TABLE donor_milestones_ref TO folding;
GRANT SELECT ON TABLE donor_milestones_ref TO folding_web;


--
-- TOC entry 3207 (class 0 OID 0)
-- Dependencies: 184
-- Name: donor_yearly; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donor_yearly FROM PUBLIC;
REVOKE ALL ON TABLE donor_yearly FROM folding;
GRANT ALL ON TABLE donor_yearly TO folding;
GRANT SELECT ON TABLE donor_yearly TO folding_web;


--
-- TOC entry 3208 (class 0 OID 0)
-- Dependencies: 185
-- Name: donor_yearly_fill; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donor_yearly_fill FROM PUBLIC;
REVOKE ALL ON TABLE donor_yearly_fill FROM folding;
GRANT ALL ON TABLE donor_yearly_fill TO folding;
GRANT SELECT ON TABLE donor_yearly_fill TO folding_web;


--
-- TOC entry 3209 (class 0 OID 0)
-- Dependencies: 186
-- Name: donors_production; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donors_production FROM PUBLIC;
REVOKE ALL ON TABLE donors_production FROM folding;
GRANT ALL ON TABLE donors_production TO folding;
GRANT SELECT ON TABLE donors_production TO folding_web;


--
-- TOC entry 3210 (class 0 OID 0)
-- Dependencies: 187
-- Name: donors_production_temp; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE donors_production_temp FROM PUBLIC;
REVOKE ALL ON TABLE donors_production_temp FROM folding;
GRANT ALL ON TABLE donors_production_temp TO folding;


--
-- TOC entry 3211 (class 0 OID 0)
-- Dependencies: 189
-- Name: last_date; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE last_date FROM PUBLIC;
REVOKE ALL ON TABLE last_date FROM folding;
GRANT ALL ON TABLE last_date TO folding;
GRANT SELECT ON TABLE last_date TO folding_web;


--
-- TOC entry 3212 (class 0 OID 0)
-- Dependencies: 190
-- Name: last_date_temp; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE last_date_temp FROM PUBLIC;
REVOKE ALL ON TABLE last_date_temp FROM folding;
GRANT ALL ON TABLE last_date_temp TO folding;


--
-- TOC entry 3213 (class 0 OID 0)
-- Dependencies: 192
-- Name: maintenance; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE maintenance FROM PUBLIC;
REVOKE ALL ON TABLE maintenance FROM folding;
GRANT ALL ON TABLE maintenance TO folding;
GRANT SELECT ON TABLE maintenance TO folding_web;


--
-- TOC entry 3214 (class 0 OID 0)
-- Dependencies: 193
-- Name: processing_end; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE processing_end FROM PUBLIC;
REVOKE ALL ON TABLE processing_end FROM folding;
GRANT ALL ON TABLE processing_end TO folding;
GRANT SELECT ON TABLE processing_end TO folding_web;


--
-- TOC entry 3215 (class 0 OID 0)
-- Dependencies: 194
-- Name: team_active_members_history; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE team_active_members_history FROM PUBLIC;
REVOKE ALL ON TABLE team_active_members_history FROM folding;
GRANT ALL ON TABLE team_active_members_history TO folding;
GRANT SELECT ON TABLE team_active_members_history TO folding_web;


--
-- TOC entry 3216 (class 0 OID 0)
-- Dependencies: 195
-- Name: teams_production; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE teams_production FROM PUBLIC;
REVOKE ALL ON TABLE teams_production FROM folding;
GRANT ALL ON TABLE teams_production TO folding;
GRANT SELECT ON TABLE teams_production TO folding_web;


--
-- TOC entry 3217 (class 0 OID 0)
-- Dependencies: 196
-- Name: teams_production_temp; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE teams_production_temp FROM PUBLIC;
REVOKE ALL ON TABLE teams_production_temp FROM folding;
GRANT ALL ON TABLE teams_production_temp TO folding;


--
-- TOC entry 3218 (class 0 OID 0)
-- Dependencies: 198
-- Name: times; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE times FROM PUBLIC;
REVOKE ALL ON TABLE times FROM folding;
GRANT ALL ON TABLE times TO folding;
GRANT SELECT ON TABLE times TO folding_web;


--
-- TOC entry 3219 (class 0 OID 0)
-- Dependencies: 199
-- Name: times_indice; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE times_indice FROM PUBLIC;
REVOKE ALL ON TABLE times_indice FROM folding;
GRANT ALL ON TABLE times_indice TO folding;
GRANT SELECT ON TABLE times_indice TO folding_web;


--
-- TOC entry 3220 (class 0 OID 0)
-- Dependencies: 202
-- Name: usuarios; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE usuarios FROM PUBLIC;
REVOKE ALL ON TABLE usuarios FROM folding;
GRANT ALL ON TABLE usuarios TO folding;
GRANT SELECT ON TABLE usuarios TO folding_web;


--
-- TOC entry 3221 (class 0 OID 0)
-- Dependencies: 204
-- Name: usuarios_indice; Type: ACL; Schema: public; Owner: folding
--

REVOKE ALL ON TABLE usuarios_indice FROM PUBLIC;
REVOKE ALL ON TABLE usuarios_indice FROM folding;
GRANT ALL ON TABLE usuarios_indice TO folding;
GRANT SELECT ON TABLE usuarios_indice TO folding_web;


-- Completed on 2015-02-02 13:49:56 UTC

--
-- PostgreSQL database dump complete
--

